// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.

    Mux16(a= instruction, b= aluout, sel= instruction[15], out= muxout);

    Not(in= instruction[15], out= isa);
    And(a= instruction[5], b= instruction[15], out= loada0);
    Or(a= loada0, b= isa, out= loada);
    ARegister(in= muxout, load= loada, out[0..14]= addressM, out[0..15]=aregisterout);

    And(a= instruction[4], b= instruction[15], out= loadd);
    DRegister(in= aluout, load= loadd, out= dregisterout);

    Mux16(a= aregisterout, b= inM, sel= instruction[12], out= alub);

    And(a= instruction[15], b= instruction[3], out= writeM);

    ALU(x= dregisterout, y= alub, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= aluout, out= outM, zr= outzr, ng= outng);


    And(a= instruction[1], b= outzr, out= loadpc1); // == 0
    And(a= instruction[2], b= outng, out= loadpc2); // < 0
    Or(a= outzr, b= outng, out= smallerequal);
    Not(in= smallerequal, out= bigger);
    And(a= instruction[0], b= bigger, out= loadpc3);// > 0
    Or(a= loadpc1, b= loadpc2, out= loadpc4);
    Or(a= loadpc3, b= loadpc4, out= loadpc5);
    And(a= instruction[15], b= loadpc5, out= loadpc6);

    And(a= instruction[0], b= instruction[1], out= jmp0);
    And(a= jmp0, b= instruction[2], out= jmp1);
    And(a= jmp1, b= instruction[15], out= jmp);

    Or(a= loadpc6, b= jmp, out= loadpc);

    PC(in= aregisterout, load= loadpc, inc= true, reset= reset, out= outpc, out[0..14]=pc);
}